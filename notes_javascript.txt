Grunt is a task-based command line build tool for JavaScript projects. Here's the idea: when working on a JavaScript project, there are a bunch of things you'll want to do regularly. Like what, you ask? Well, like concatenating given files, running JSHint on your code, running tests, or minifying your scripts.

http://code.tutsplus.com/tutorials/meet-grunt-the-build-tool-for-javascript--net-24856

________________
npm is a command line interface program to manage node.js libraries (it stands for node package manager ). Check out the doc, it is awesome and amazing. As you mentioned, just type npm install in a command prompt, and voilà, you have the library in your local node modules.

http://stackoverflow.com/questions/9237715/what-does-npm-mean-for-socket-io-installing-stuff

npm install <package> --save
be careful, if package.json does not exist, it will add the dependency in the closest package.json
Workaround:
npm init
npm init -f (not interactive)
create a package.json file with {} inside


________________
AMD/require

Asynchronous Module Definition

_________________
browserify

Browsers don't have the require method defined, but Node.js does. With Browserify you can write code that uses require in the same way that you would use it in Node.
Then bundle up everything
browserify main.js -o bundle.js

run with nodemon instead of node: watches the code updates and automatically reloads

CommonJS defines a module format
Implementations: CommonJS module systems like browserify or webpack. 



_____________________
Node js debug

npm install -g node-inspector
node-debug app.js

Generate SSL certificate https
openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
openssl rsa -passin pass:x -in server.pass.key -out server.key
rm server.pass.key
openssl req -new -key server.key -out server.csr
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt



______________________________
React stack

Install yeoman
npm install -g yo bower grunt-cli gulp

Install React generator
npm install -g generator-react-fullstac

Create a project
yo react-fullstack



______________________________
Modernizr tells you what HTML, CSS and JavaScript features the user’s browser has to offer.



_________________
grunt/gulp
gulp faster (pipe instead of writing to disk)
gulp seems to require less configuration

dependencies management
npm/bower
npm created for node. Possible to use for front-end
bower dedicated to front-end
npm manages tree-dependencies
bower flat dependencies (better to minimize size)




______________________________
ECMAScript 6

Some features are already implemented by browsers/node. Some are not.
Babel transpiles/translate ES6 into ES5 javascript 
sudo npm install -g babel-cli

babel ES6.js | node
babel ES6.js --out-file output.js


Difference between let and var:
let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function


___________________________
Javascript :
.then() : promise

eval() in template to transform a json string as an object

_________________________________________

variables are defined in the closest scope
the scopes are defined by function, not by if/else/for (different from java/etc)

outer scope variables are visible, but not the opposite

variable hoistings:
the variables can be used before being declared

function hoisting:

function declaration syntax:
function declarationSyntaxName(){};

what actually happesn:
var declarationSyntaxName = function declarationSyntaxName() {};

possible to call a function before being defined

var myFunction = function() {};
var timer = myFunction();
/!\ be careful to the parenthesis

var nTimes = function (n) {
	return function (fn) {
		for (var i = 0; i < n; i++) {
			fn(i);
		}
	}
}

var fiveTimes = nTimes(5);

fiveTimes(function (n) {
	console.log(n);
})


var startTimer = function () {
	var start = new Date().getTime();
	return function () {
		return ((new Date().getTime() - start) / 1000) + 's';
	};
};

var timer = startTimer();

console.log(timer());

setInterval(function () {
	console.log(timer());
}, 2000);


JavaScript objects:
